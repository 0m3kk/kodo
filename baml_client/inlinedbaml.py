# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "config.baml": "client OpenRouter {\n  provider \"openai-generic\"\n  options {\n    api_key env.OPENROUTER_API_KEY\n    base_url \"https://openrouter.ai/api/v1\"\n    model \"qwen/qwen3-32b:free\"\n  }\n}\n",
    "functions.baml": "function Orchestrate(query: string, history: string[]) -> ReadFile | WriteFile | ListDirectoryContents | FindContentInFile | GetUserInput | ReviewAndConfirmChanges | CollectUserFeedback | RequestHumanIntervention | FinalAnswer | WebFetch | APIFetch {\n  client OpenRouter\n  prompt #\"\n    You are a helpful assistant. Your job is to help the user with their request.\n    You have the following tools at your disposal, defined as classes:\n    {{ ctx.output_format }}\n\n    Based on the user's query and the conversation history, which tool should you use? You must use a tool.\n\n    Query: {{ query }}\n    {% if history is defined and history|length > 0 %}\n    History:\n    {{ history | join(\"\\n\") }}\n    {% endif %}\n\n    Choose the best tool for the query and fill in the parameters.\n  \"#\n}\n",
    "types.baml": "class ReadFile {\n  tool_name \"read_file\" @description(\"Reads the content of a given file path.\")\n  file_path string @description(\"The path to the file to read.\")\n}\n\nclass WriteFile {\n  tool_name \"write_file\" @description(\"Writes the given content to a file at the specified path.\")\n  file_path string @description(\"The path to the file to write to.\")\n  content string @description(\"The content to write to the file.\")\n}\n\nclass ListDirectoryContents {\n  tool_name \"list_directory_contents\" @description(\"Lists all non-hidden files and subdirectories within a given directory.\")\n  directory_path string @description(\"The path to the directory to list. Defaults to .\")\n}\n\nclass FindContentInFile {\n  tool_name \"find_content_in_file\" @description(\"Reads the content of a file and returns lines containing the search query.\")\n  file_path string @description(\"The path to the file to search within.\")\n  search_query string @description(\"The string to search for (case-insensitive).\")\n}\n\nclass GetUserInput {\n  tool_name \"get_user_text_input\" @description(\"Gets free-form text input from the user via the CLI.\")\n  prompt_message string @description(\"The message to display to the user.\")\n}\n\nclass ReviewAndConfirmChanges {\n  tool_name \"review_and_confirm_changes\" @description(\"Displays a diff of proposed changes and asks for user confirmation to apply them.\")\n  file_path string @description(\"The path to the file to be modified.\")\n  new_content string @description(\"The proposed new content for the file.\")\n}\n\nclass CollectUserFeedback {\n  tool_name \"collect_feedback\" @description(\"Logs feedback to the console and a file.\")\n  task_id string @description(\"The ID of the task related to the feedback.\")\n  feedback_type string @description(\"The type of feedback (e.g., 'info', 'warning', 'error').\")\n  message string @description(\"The feedback message.\")\n}\n\nclass RequestHumanIntervention {\n  tool_name \"request_human_intervention\" @description(\"Pauses the agent and prompts the user for new instructions.\")\n  reason string @description(\"The reason for requesting intervention.\")\n}\n\nclass FinalAnswer {\n  tool_name \"final_answer\" @description(\"Provides the final answer to the user.\")\n  answer string @description(\"The final answer to be provided to the user.\")\n}\n\nclass WebFetch {\n  tool_name \"fetch_page_content\" @description(\"Fetches the full HTML content of a given URL using a headless browser.\")\n  url string @description(\"The URL to fetch.\")\n}\n\nclass APIFetch {\n  tool_name \"fetch_api_data\" @description(\"Fetches data from a given API endpoint.\")\n  url string @description(\"The URL of the API endpoint.\")\n  method string @description(\"The HTTP method to use (GET, POST, PUT, DELETE, etc.). Defaults to GET.\")\n  headers map<string, string> @description(\"A dictionary of HTTP headers to send with the request.\")\n  data map<string, string> @description(\"A dictionary of data to send in the request body (for POST, PUT, etc.).\")\n}\n",
}

def get_baml_files():
    return _file_map