# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "config.baml": "client OpenRouter {\n  provider \"openai-generic\"\n  options {\n    api_key env.OPENROUTER_API_KEY\n    base_url \"https://openrouter.ai/api/v1\"\n    model \"qwen/qwen3-32b:free\"\n  }\n}\n",
    "functions.baml": "class ToolCall {\n  name Tool\n  args map<string, string>\n}\n\nfunction Orchestrate(query: string, history: string[]) -> ToolCall {\n  client OpenRouter\n  prompt #\"\n    You are a helpful assistant. Your job is to help the user with their request.\n    You have the following tools at your disposal:\n    - ReadFile(filePath: string) -> string\n    - WriteFile(filePath: string, content: string) -> bool\n    - ListDirectoryContents(directoryPath: string) -> list<string>\n    - FindContentInFile(filePath: string, searchQuery: string) -> list<string>\n    - GetUserInput(prompt: string) -> string\n    - ReviewAndConfirmChanges(filePath: string, newContent: string) -> bool\n    - CollectUserFeedback(taskId: string, feedbackType: string, feedbackMessage: string) -> void\n    - RequestHumanIntervention(reason: string) -> string\n\n    Based on the user's query and the conversation history, which tool should you use?\n\n    Query: {{ query }}\n    {% if history is defined and history|length > 0 %}\n     History:\n    {{ history | join(\"\\n\") }}\n    {% endif %}\n\n    {{ ctx.output_format }}\n  \"#\n}\n",
    "types.baml": "enum Tool {\n  ReadFile\n  WriteFile\n  ListDirectoryContents\n  FindContentInFile\n  GetUserInput\n  ReviewAndConfirmChanges\n  CollectUserFeedback\n  RequestHumanIntervention\n}\n",
}

def get_baml_files():
    return _file_map