# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (11)
# #########################################################################

class APIFetch(BaseModel):
    tool_name: typing_extensions.Literal['fetch_api_data']
    url: str
    method: str
    headers: typing.Dict[str, str]
    data: typing.Dict[str, str]
    limit: int
    offset: int

class CollectUserFeedback(BaseModel):
    tool_name: typing_extensions.Literal['collect_feedback']
    task_id: str
    feedback_type: str
    message: str

class FinalAnswer(BaseModel):
    tool_name: typing_extensions.Literal['final_answer']
    answer: str

class FindContentInFile(BaseModel):
    tool_name: typing_extensions.Literal['find_content_in_file']
    file_path: str
    search_query: str

class GetUserInput(BaseModel):
    tool_name: typing_extensions.Literal['get_user_text_input']
    prompt_message: str

class ListDirectoryContents(BaseModel):
    tool_name: typing_extensions.Literal['list_directory_contents']
    directory_path: str

class ReadFile(BaseModel):
    tool_name: typing_extensions.Literal['read_file']
    file_path: str

class RequestHumanIntervention(BaseModel):
    tool_name: typing_extensions.Literal['request_human_intervention']
    reason: str

class ReviewAndConfirmChanges(BaseModel):
    tool_name: typing_extensions.Literal['review_and_confirm_changes']
    file_path: str
    new_content: str

class WebFetch(BaseModel):
    tool_name: typing_extensions.Literal['fetch_page_content']
    url: str

class WriteFile(BaseModel):
    tool_name: typing_extensions.Literal['write_file']
    file_path: str
    content: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
